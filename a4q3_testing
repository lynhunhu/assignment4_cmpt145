#Name: Nhu Nhu Ly
#NSID: cvd326
#instructor's name: Eric Neufeld
#student number: 11333935
#course number: 27177
#lab section: Monday 1:30 - 2:50 - 28623

import Statistics as S

def test_min(value):
    test_item = 'Operation min(value)'
    stats = S.Statistics()
    
    reason1 = "Check the non-negative integer list"
    expected1 = 1

    if value == [1,2,3,4,5,6,7,8,9]:
        result1 = stats.min(value)
        if result1 == expected1:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The min integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The min integer found is not correct...')
    
    reason2 = "Check a list when there are real numbers"
    expected2 = 0.1

    if value == [0.25,3,9,0.1,15,28,4]:
        result2 = stats.min(value)
        if result2 == expected2:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The min integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The min integer found is not correct...')

    reason3 = "Check a list when there are negative integers"
    expected3 = -3

    if value == [0,3,9,-3,15,28,-1]:
        result3 = stats.min(value)
        if result3 == expected3:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The min integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The min integer found is not correct...')

def test_max(value):
    test_item = 'Operation max(value)'
    stats = S.Statistics()
    
    reason1 = "Check the non-negative integer list"
    expected1 = 9

    if value == [1,2,3,4,5,6,7,8,9]:
        result1 = stats.max(value)
        if result1 == expected1:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The max integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The max integer found is not correct...')
    
    reason2 = "Check a list when there are real numbers"
    expected2 = 2.9

    if value == [0.25,0.23,0.03,0.1,0.15,2.9,0.4]:
        result2 = stats.max(value)
        if result2 == expected2:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The max integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The max integer found is not correct...')

    reason3 = "Check a list when there are negative integers"
    expected3 = -1

    if value == [-10,-9,-3,-15,-28,-1]:
        result3 = stats.max(value)
        if result3 == expected3:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The max integer is found correctly!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The max integer found is not correct...')

def test_range(value):
    test_item = 'Operation range(value)'
    stats = S.Statistics()

    reason1 = "Check the non-negative integer list"
    expected1 = 8

    if value == [1,2,3,4,5,6,7,8,9]:
        result1 = stats.range(value)
        if result1 == expected1:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The range is correct!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected1,result1,reason1))
            print('The range is not correct...')

    reason2 = "Check a list when there are real numbers"
    expected2 = 2.87

    if value == [0.25,0.23,0.03,0.1,0.15,2.9,0.4]:
        result2 = stats.range(value)
        if result2 == expected2:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The range is correct!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected2,result2,reason2))
            print('The range is not correct...')

    reason3 = "Check a list when there are negative integers"
    expected3 = 27

    if value == [-10,-9,-3,-15,-28,-1]:
        result3 = stats.range(value)
        if result3 == expected3:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The range is correct!')
        else:
            print('Testing {}: {} expected {} - obtained {} -- {}'.format(test_item,value,expected3,result3,reason3))
            print('The range is not correct...')
    

def test_mode(value):
    test_item = 'Operation mode(value)'
    stats = S.Statistics()

    reason = "Check and return a highest occurrence of a number in a list"
    result = stats.mode(value)
    expected = (5,9)

    if result == expected :
        print('Testing {}: {} expected {} obtained {} - {}'.format(test_item, value,expected,result,reason))
        print('In the provided list, the number of {} occurred {} times'.format(expected[1],expected[0]))

    else:
        print('Testing {}: {} expected {} obtained {} - {}'.format(test_item, value,expected,result,reason))
        print('The output is not expected...')


def main():
    test_min([1,2,3,4,5,6,7,8,9])
    test_min([0.25,3,9,0.1,15,28,4])
    test_min([0,3,9,-3,15,28,-1])

    test_max([-10,-9,-3,-15,-28,-1])
    test_max([0.25,0.23,0.03,0.1,0.15,2.9,0.4])
    test_max([1,2,3,4,5,6,7,8,9])

    test_range([-10,-9,-3,-15,-28,-1])
    test_range([0.25,0.23,0.03,0.1,0.15,2.9,0.4])
    test_range([1,2,3,4,5,6,7,8,9])

    test_mode([1,2,3,3,4,5,5,9,9,9,5,0,9,9,3,2,4,5])


main()

    

    


    
